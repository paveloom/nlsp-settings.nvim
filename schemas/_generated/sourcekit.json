{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "description": "Setting of sourcekit",
  "properties": {
    "swift.actionAfterBuildError": {
      "default": "Focus Terminal",
      "enum": [
        "Focus Problems",
        "Focus Terminal",
        "Do Nothing"
      ],
      "enumDescriptions": [
        "Focus on Problems View",
        "Focus on Build Task Terminal"
      ],
      "markdownDescription": "Action after a Build task generates errors.",
      "order": 11,
      "type": "string"
    },
    "swift.autoGenerateLaunchConfigurations": {
      "default": true,
      "markdownDescription": "When loading a `Package.swift`, auto-generate `launch.json` configurations for running any executables.",
      "order": 6,
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.backgroundCompilation": {
      "default": false,
      "markdownDescription": "**Experimental**: Run `swift build` in the background whenever a file is saved.",
      "order": 10,
      "type": "boolean"
    },
    "swift.buildArguments": {
      "default": [],
      "items": {
        "type": "string"
      },
      "markdownDescription": "Arguments to pass to `swift build`. Keys and values should be provided as separate entries. If you have created a copy of the build task in `tasks.json` then these build arguments will not be propogated to that task.",
      "order": 2,
      "type": "array"
    },
    "swift.buildPath": {
      "default": "",
      "markdownDescription": "Path to the build directory passed to all swift package manager commands.",
      "order": 12,
      "type": "string"
    },
    "swift.diagnosticsCollection": {
      "default": "keepSourceKit",
      "description": "Controls how diagnostics from the various providers are merged into the `swift` diagnostics collection.",
      "enum": [
        "onlySwiftc",
        "onlySourceKit",
        "keepSwiftc",
        "keepSourceKit",
        "keepAll"
      ],
      "enumDescriptions": [
        "Only provide diagnostics from `swiftc`.",
        "Only provide diagnostics from `SourceKit`.",
        "When merging diagnostics, give precedence to diagnostics from `swiftc`.",
        "When merging diagnostics, give precedence to diagnostics from `SourceKit`.",
        "Keep diagnostics from all providers."
      ],
      "order": 8,
      "type": "string"
    },
    "swift.diagnosticsStyle": {
      "default": "llvm",
      "description": "Controls which -diagnostic-style option to pass to `swiftc` when running `swift` tasks.",
      "enum": [
        "default",
        "llvm",
        "swift"
      ],
      "enumDescriptions": [
        "Use whichever diagnostics style `swiftc` produces by default.",
        "Use the \"llvm\" diagnostic style. This allows the parsing of \"notes\".",
        "Use the \"swift\" diagnostic style. This means that \"notes\" will not be parsed. This option will not work for Swift versions prior to 5.10."
      ],
      "order": 9,
      "type": "string"
    },
    "swift.disableAutoResolve": {
      "default": false,
      "markdownDescription": "Disable automatic running of `swift package resolve`. This will also disable searching for command plugins and the initial test discovery process as both of these can kick of a resolve.",
      "order": 7,
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.disableSwiftPackageManagerIntegration": {
      "default": false,
      "markdownDescription": "Disables automated Build Tasks, Package Dependency view, Launch configuration generation and TestExplorer.",
      "order": 13,
      "type": "boolean"
    },
    "swift.enableTerminalEnvironment": {
      "default": true,
      "description": "Controls whether or not the extension will contribute Swift environment variables to the integrated terminal.",
      "order": 15,
      "type": "boolean"
    },
    "swift.path": {
      "default": "",
      "markdownDescription": "The path of the folder containing the Swift executables. The default is to look in the PATH environment variable.",
      "order": 1,
      "type": "string"
    },
    "swift.sanitizer": {
      "default": "off",
      "description": "Runtime sanitizer instrumentation.",
      "enum": [
        "off",
        "thread",
        "address"
      ],
      "order": 4,
      "scope": "machine-overridable",
      "type": "string"
    },
    "swift.searchSubfoldersForPackages": {
      "default": false,
      "markdownDescription": "Search sub-folders of workspace folder for Swift Packages at start up.",
      "order": 5,
      "scope": "machine-overridable",
      "type": "boolean"
    },
    "swift.testEnvironmentVariables": {
      "default": {},
      "markdownDescription": "Environment variables to set when running tests. To set environment variables when debugging an application you should edit the relevant `launch.json` configuration",
      "order": 3,
      "patternProperties": {
        ".*": {
          "type": "string"
        }
      },
      "scope": "machine-overridable",
      "type": "object"
    },
    "swift.warnAboutSymlinkCreation": {
      "default": true,
      "description": "Controls whether or not the extension will warn about being unable to create symlinks. (Windows only)",
      "order": 14,
      "scope": "application",
      "type": "boolean"
    }
  }
}
